<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on devbins blog</title>
    <link>http://devbins.githu.io/tags/android/</link>
    <description>Recent content in Android on devbins blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 26 Mar 2021 00:00:00 +0800</lastBuildDate><atom:link href="http://devbins.githu.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Zygote 是怎么使用 LocalSocket 进行进程间通信的</title>
      <link>http://devbins.githu.io/post/localsocket/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>http://devbins.githu.io/post/localsocket/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文基于 &lt;code&gt;Android10&lt;/code&gt; ，分析 &lt;code&gt;Zygote&lt;/code&gt; 与 &lt;code&gt;AMS&lt;/code&gt; 是如何使用 &lt;code&gt;LocalSocket&lt;/code&gt; 建立连接的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android中管道的使用</title>
      <link>http://devbins.githu.io/post/pipe/</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0800</pubDate>
      
      <guid>http://devbins.githu.io/post/pipe/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近读了一些 &lt;code&gt;Android&lt;/code&gt; 源码，发现其中不少是用 &lt;code&gt;pipe&lt;/code&gt; 机制来实现的，并且和我们往常使用 &lt;code&gt;pipe&lt;/code&gt;  有些不一样。&lt;/p&gt;
&lt;p&gt;有必要学习一下 &lt;code&gt;pipe&lt;/code&gt; 的使用，不然会影响阅读源码，并且 &lt;code&gt;Android&lt;/code&gt; 里的使用方式比较有技巧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MPAndroidChart 使用总结</title>
      <link>http://devbins.githu.io/post/mpandroidchart/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>http://devbins.githu.io/post/mpandroidchart/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;今年开工以来，一直接触图表相关的开发，经过选择最后采用 &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart&#34;&gt;MPAndroidChart&lt;/a&gt; ，期间碰到了一些问题，踩了不少坑。特来总结一下，以免日后忘记。这些知识点虽然不难，但是非常零碎，找起来比较麻烦。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用Docker下载AOSP源码</title>
      <link>http://devbins.githu.io/post/aosp/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>http://devbins.githu.io/post/aosp/</guid>
      <description>AOSP 介绍 AOSP 是 Android 开放源码项目，通俗点就是整个 Android 的源码。有了 AOSP 我们就可以在源码的层面去了解整个 Android 系统。甚至可以自己基于 AOSP 去定制自己系统，这也是众多</description>
    </item>
    
    <item>
      <title>RxLifecycle 原理解析</title>
      <link>http://devbins.githu.io/post/rxlifecycle/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>http://devbins.githu.io/post/rxlifecycle/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by Léonard Cotte on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;从名字中可以看出 &lt;code&gt;RxLifecycle&lt;/code&gt; 和生命周期有关。也的确如此， &lt;code&gt;RxLifecycle&lt;/code&gt; 通过监听生命周期的变化，来解决 &lt;code&gt;RxJava&lt;/code&gt; 内存泄漏的问题。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
